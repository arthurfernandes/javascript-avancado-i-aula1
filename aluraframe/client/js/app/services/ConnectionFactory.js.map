{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","dbName","stores","version","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAW;;AAEhC,QAAMC,SAAS,YAAf;AACA,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAIC,UAAU,CAAd;AACA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAEA;AACI,qCAAc;AAAA;;AACV,kBAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;AACH;;AAHL;AAAA;AAAA,4CAK2B;AACnB,uBAAO,IAAIC,OAAJ,CAAa,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACrC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBZ,MAAtB,EAA8BE,OAA9B,CAAlB;;AAEAO,gCAAYI,eAAZ,GAA8B,aAAK;AAC/Bd,0CAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,qBAFD;;AAIAR,gCAAYS,SAAZ,GAAwB,aAAK;AACzB,4BAAI,CAACf,UAAL,EAAiB;AACbA,yCAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACH;;AAEDA,mCAAWC,KAAX,GAAoB,YAAM;AAAC,kCAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN;AAA0D,yBAArF;;AAEAE,gCAAQJ,UAAR;AACH,qBATD;;AAWAM,gCAAYW,OAAZ,GAAsB,aAAK;AACvBC,gCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,+BAAO,gDAAP;AACH,qBAHD;AAIH,iBAtBM,CAAP;AAuBH;AA7BL;AAAA;AAAA,8CA+B4B;AACpB,oBAAIL,UAAJ,EAAgB;AACZC;AACAD,iCAAa,IAAb;AACH;AACJ;AApCL;AAAA;AAAA,0CAsCyBA,UAtCzB,EAsCqC;AAC7BF,uBAAOuB,OAAP,CAAgB,iBAAS;AACrB,wBAAIrB,WAAWsB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiDxB,WAAWyB,iBAAX,CAA6BD,KAA7B;;AAEjDxB,+BAAW0B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACH,iBAJD;AAKH;AA5CL;;AAAA;AAAA;AA8CH,CAtDwB,EAAzB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function() {\n\n    const dbName = 'aluraframe';\n    const stores = ['negociacoes'];\n    let version = 5;\n    let connection = null;\n    let close = null;\n\n    return class ConnectionFactory {\n        constructor() {\n            throw new Error(\"Essa classe nao pode ser instanciada\");\n        }\n    \n        static getConnection() {\n            return new Promise( (resolve, reject) => {\n                var openRequest = window.indexedDB.open(dbName, version);\n    \n                openRequest.onupgradeneeded = e => {\n                    ConnectionFactory._createStores(e.target.result);\n                }\n    \n                openRequest.onsuccess = e => {\n                    if (!connection) {\n                        connection = e.target.result;\n                        close = connection.close.bind(connection);\n                    }\n    \n                    connection.close  = () => {throw new Error(\"Nao pode fechar a conexao manualmente\");}\n    \n                    resolve(connection);\n                }\n    \n                openRequest.onerror = e => {\n                    console.log(e.target.error);\n                    reject(\"Não foi possível se conectar ao Banco de Dados\");\n                }\n            });\n        }\n    \n        static closeConnection(){\n            if (connection) {\n                close();\n                connection = null;\n            }\n        }\n\n        static _createStores(connection) {\n            stores.forEach( store => {\n                if (connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\n    \n                connection.createObjectStore(store, {autoIncrement: true});\n            });\n        }\n    }\n}());"]}