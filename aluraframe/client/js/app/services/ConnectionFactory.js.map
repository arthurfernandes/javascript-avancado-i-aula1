{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["dbName","stores","version","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACMA,kB,GAAS,Y;AACTC,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACZC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAECC,iB;AACT,6CAAc;AAAA;;AACV,0BAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;AACH;;;;oDAEsB;AACnB,+BAAO,IAAIC,OAAJ,CAAa,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACrC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBb,MAAtB,EAA8BE,OAA9B,CAAlB;;AAEAQ,wCAAYI,eAAZ,GAA8B,aAAK;AAC/BT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,6BAFD;;AAIAR,wCAAYS,SAAZ,GAAwB,aAAK;AACzB,oCAAI,CAAChB,UAAL,EAAiB;AACbA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACH;;AAEDA,2CAAWC,KAAX,GAAoB,YAAM;AAAC,0CAAM,IAAIE,KAAJ,CAAU,uCAAV,CAAN;AAA0D,iCAArF;;AAEAE,wCAAQL,UAAR;AACH,6BATD;;AAWAO,wCAAYW,OAAZ,GAAsB,aAAK;AACvBC,wCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,uCAAO,gDAAP;AACH,6BAHD;AAIH,yBAtBM,CAAP;AAuBH;;;sDAEuB;AACpB,4BAAIN,UAAJ,EAAgB;AACZC;AACAD,yCAAa,IAAb;AACH;AACJ;;;kDAEoBA,U,EAAY;AAC7BF,+BAAOwB,OAAP,CAAgB,iBAAS;AACrB,gCAAItB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiDzB,WAAW0B,iBAAX,CAA6BD,KAA7B;;AAEjDzB,uCAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACH,yBAJD;AAKH","file":"ConnectionFactory.js","sourcesContent":["\nconst dbName = 'aluraframe';\nconst stores = ['negociacoes'];\nconst version = 5;\nlet connection = null;\nlet close = null;\n\nexport class ConnectionFactory {\n    constructor() {\n        throw new Error(\"Essa classe nao pode ser instanciada\");\n    }\n\n    static getConnection() {\n        return new Promise( (resolve, reject) => {\n            var openRequest = window.indexedDB.open(dbName, version);\n\n            openRequest.onupgradeneeded = e => {\n                ConnectionFactory._createStores(e.target.result);\n            }\n\n            openRequest.onsuccess = e => {\n                if (!connection) {\n                    connection = e.target.result;\n                    close = connection.close.bind(connection);\n                }\n\n                connection.close  = () => {throw new Error(\"Nao pode fechar a conexao manualmente\");}\n\n                resolve(connection);\n            }\n\n            openRequest.onerror = e => {\n                console.log(e.target.error);\n                reject(\"Não foi possível se conectar ao Banco de Dados\");\n            }\n        });\n    }\n\n    static closeConnection(){\n        if (connection) {\n            close();\n            connection = null;\n        }\n    }\n\n    static _createStores(connection) {\n        stores.forEach( store => {\n            if (connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\n\n            connection.createObjectStore(store, {autoIncrement: true});\n        });\n    }\n}"]}