{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_httpService","HttpService","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","then","negociacoes","periodos","reduce","arrayAchatado","arr","concat","catch","Error","erro","get","map","Negociacao","Date","n","data","quantidade","valor","console","log","negociacao","ConnectionFactory","getConnection","NegociacaoDao","connection","dao","adiciona","listaTodos","negociacoesExistentes","obterNegociacoes","filter","some","isEquals","negociacaoExistente","apagaTodos"],"mappings":";;;;;;IAAMA,iB;AAEL,8BAAc;AAAA;;AACb,OAAKC,YAAL,GAAoB,IAAIC,WAAJ,EAApB;AACA;;;;qCAEkB;AAClB,UAAOC,QAAQC,GAAR,CAAY,CAClB,KAAKC,wBAAL,EADkB,EAElB,KAAKC,gCAAL,EAFkB,EAGlB,KAAKC,iCAAL,EAHkB,CAAZ,EAILC,IAJK,CAIC,oBAAY;AACnB,QAAIC,cAAcC,SAASC,MAAT,CAAgB,UAACC,aAAD,EAAgBC,GAAhB;AAAA,YAAwBD,cAAcE,MAAd,CAAqBD,GAArB,CAAxB;AAAA,KAAhB,EAAmE,EAAnE,CAAlB;AACA,WAAOJ,WAAP;AACA,IAPM,EAOJM,KAPI,CAOG,gBAAQ;AACjB,UAAM,IAAIC,KAAJ,CAAUC,IAAV,CAAN;AACA,IATM,CAAP;AAUA;;;6CAE0B;AAC1B,UAAO,KAAKhB,YAAL,CAAkBiB,GAAlB,CAAsB,oBAAtB,EACJV,IADI,CACE,uBAAe;AACrB,WAAOC,YAAYU,GAAZ,CAAiB;AAAA,YAAK,IAAIC,UAAJ,CAAe,IAAIC,IAAJ,CAASC,EAAEC,IAAX,CAAf,EAAiCD,EAAEE,UAAnC,EAA+CF,EAAEG,KAAjD,CAAL;AAAA,KAAjB,CAAP;AACA,IAHI,EAIJV,KAJI,CAIG,gBAAQ;AACfW,YAAQC,GAAR,CAAYV,IAAZ;AACA,UAAM,IAAID,KAAJ,CAAU,iDAAV,CAAN;AACA,IAPI,CAAP;AAQA;;;qDAEkC;AAClC,UAAO,KAAKf,YAAL,CAAkBiB,GAAlB,CAAsB,sBAAtB,EACJV,IADI,CACE,uBAAe;AACrB,WAAOC,YAAYU,GAAZ,CAAiB;AAAA,YAAK,IAAIC,UAAJ,CAAe,IAAIC,IAAJ,CAASC,EAAEC,IAAX,CAAf,EAAiCD,EAAEE,UAAnC,EAA+CF,EAAEG,KAAjD,CAAL;AAAA,KAAjB,CAAP;AACA,IAHI,EAIJV,KAJI,CAIG,gBAAQ;AACfW,YAAQC,GAAR,CAAYV,IAAZ;AACA,UAAM,IAAID,KAAJ,CAAU,0DAAV,CAAN;AACA,IAPI,CAAP;AAQA;;;sDAEmC;AACnC,UAAO,KAAKf,YAAL,CAAkBiB,GAAlB,CAAsB,uBAAtB,EACJV,IADI,CACE,uBAAe;AACrB,WAAOC,YAAYU,GAAZ,CAAiB;AAAA,YAAK,IAAIC,UAAJ,CAAe,IAAIC,IAAJ,CAASC,EAAEC,IAAX,CAAf,EAAiCD,EAAEE,UAAnC,EAA+CF,EAAEG,KAAjD,CAAL;AAAA,KAAjB,CAAP;AACA,IAHI,EAIJV,KAJI,CAIG,gBAAQ;AACfW,YAAQC,GAAR,CAAYV,IAAZ;AACA,UAAM,IAAID,KAAJ,CAAU,2DAAV,CAAN;AACA,IAPI,CAAP;AAQA;;;0BAEOY,U,EAAY;AACnB,UAAOC,kBAAkBC,aAAlB,GACJtB,IADI,CACC;AAAA,WAAc,IAAIuB,aAAJ,CAAkBC,UAAlB,CAAd;AAAA,IADD,EAEJxB,IAFI,CAEC,eAAO;AACZyB,QAAIC,QAAJ,CAAaN,UAAb;AACA,WAAO,iCAAP;AACA,IALI,EAMJb,KANI,CAMG,gBAAQ;AACfW,YAAQC,GAAR,CAAYV,IAAZ;AACA,UAAM,IAAID,KAAJ,CAAU,uCAAV,CAAN;AACA,IATI,CAAP;AAUA;;;0BAEO;AACP,UAAOa,kBAAkBC,aAAlB,GACJtB,IADI,CACE;AAAA,WAAc,IAAIuB,aAAJ,CAAkBC,UAAlB,CAAd;AAAA,IADF,EAEJxB,IAFI,CAEE;AAAA,WAAOyB,IAAIE,UAAJ,EAAP;AAAA,IAFF,EAGJpB,KAHI,CAGG,gBAAQ;AACfW,YAAQC,GAAR,CAAYV,IAAZ;AACA,UAAM,IAAID,KAAJ,CAAU,mDAAV,CAAN;AACA,IANI,CAAP;AAOA;;;0BAEOoB,qB,EAAuB;AAC9B,UAAO,KAAKC,gBAAL,GACJ7B,IADI,CACE;AAAA,WAAeC,YAAY6B,MAAZ,CAAoB;AAAA,YACzC,CAACF,sBAAsBG,IAAtB,CAA2B;AAAA,aAC5BX,WAAWY,QAAX,CAAoBC,mBAApB,CAD4B;AAAA,MAA3B,CADwC;AAAA,KAApB,CAAf;AAAA,IADF,EAIJ1B,KAJI,CAIG,gBAAQ;AACfW,YAAQC,GAAR,CAAYV,IAAZ;AACA,UAAM,IAAID,KAAJ,CAAU,0CAAV,CAAN;AACA,IAPI,CAAP;AAQA;;;0BAEO;AACP,UAAOa,kBAAkBC,aAAlB,GACJtB,IADI,CACC;AAAA,WAAc,IAAIuB,aAAJ,CAAkBC,UAAlB,CAAd;AAAA,IADD,EAEJxB,IAFI,CAEC;AAAA,WAAOyB,IAAIS,UAAJ,EAAP;AAAA,IAFD,EAGJlC,IAHI,CAGE;AAAA,WAAM,kCAAN;AAAA,IAHF,EAIJO,KAJI,CAIG,gBAAQ;AACfW,YAAQC,GAAR,CAAYV,IAAZ;AACA,UAAM,IAAID,KAAJ,CAAU,wCAAV,CAAN;AACA,IAPI,CAAP;AAQA","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\n\n\tconstructor() {\n\t\tthis._httpService = new HttpService();\n\t}\n\n\tobterNegociacoes() {\n\t\treturn Promise.all([\n\t\t\tthis.obterNegociacoesDaSemana(),\n\t\t\tthis.obterNegociacoesDaSemanaAnterior(),\n\t\t\tthis.obterNegociacoesDaSemanaRetrasada()]\n\t\t).then( periodos => {\n\t\t\tlet negociacoes = periodos.reduce((arrayAchatado, arr) => arrayAchatado.concat(arr), []);\n\t\t\treturn negociacoes;\n\t\t}).catch( erro => {\n\t\t\tthrow new Error(erro);\n\t\t});\n\t}\n\n\tobterNegociacoesDaSemana() {\n\t\treturn this._httpService.get('negociacoes/semana')\n\t\t\t\t.then( negociacoes => {\n\t\t\t\t\treturn negociacoes.map( n => new Negociacao(new Date(n.data), n.quantidade, n.valor));\n\t\t\t\t})\n\t\t\t\t.catch( erro => {\n\t\t\t\t\tconsole.log(erro);\n\t\t\t\t\tthrow new Error(\"Não foi possível obter as negociações da semana\");\n\t\t\t\t});\n\t}\n\n\tobterNegociacoesDaSemanaAnterior() {\n\t\treturn this._httpService.get('negociacoes/anterior')\n\t\t\t\t.then( negociacoes => {\n\t\t\t\t\treturn negociacoes.map( n => new Negociacao(new Date(n.data), n.quantidade, n.valor));\n\t\t\t\t})\n\t\t\t\t.catch( erro => {\n\t\t\t\t\tconsole.log(erro);\n\t\t\t\t\tthrow new Error(\"Não foi possível obter as negociações da semana anterior\");\n\t\t\t\t});\n\t}\n\n\tobterNegociacoesDaSemanaRetrasada() {\n\t\treturn this._httpService.get('negociacoes/retrasada')\n\t\t\t\t.then( negociacoes => {\n\t\t\t\t\treturn negociacoes.map( n => new Negociacao(new Date(n.data), n.quantidade, n.valor));\n\t\t\t\t})\n\t\t\t\t.catch( erro => {\n\t\t\t\t\tconsole.log(erro);\n\t\t\t\t\tthrow new Error(\"Não foi possível obter as negociações da semana retrasada\");\n\t\t\t\t});\n\t}\n\n\tcarrega(negociacao) {\n\t\treturn ConnectionFactory.getConnection()\n\t\t\t\t.then(connection => new NegociacaoDao(connection))\n\t\t\t\t.then(dao => {\n\t\t\t\t\tdao.adiciona(negociacao)\n\t\t\t\t\treturn \"Negociação incluida com sucesso\";\n\t\t\t\t})\n\t\t\t\t.catch( erro => {\n\t\t\t\t\tconsole.log(erro);\n\t\t\t\t\tthrow new Error(\"Não foi possível incluir a negociação\");\n\t\t\t\t});\n\t}\n\n\tlista() {\n\t\treturn ConnectionFactory.getConnection()\n\t\t\t\t.then( connection => new NegociacaoDao(connection))\n\t\t\t\t.then( dao => dao.listaTodos())\n\t\t\t\t.catch( erro => {\n\t\t\t\t\tconsole.log(erro);\n\t\t\t\t\tthrow new Error(\"Não foi possível resgatar as negociações do banco\");\n\t\t\t\t});\n\t}\n\n\timporta(negociacoesExistentes) {\n\t\treturn this.obterNegociacoes()\n\t\t\t\t.then( negociacoes => negociacoes.filter( negociacao => \n\t\t\t\t\t!negociacoesExistentes.some(negociacaoExistente =>  \n\t\t\t\t\tnegociacao.isEquals(negociacaoExistente))))\n\t\t\t\t.catch( erro => {\n\t\t\t\t\tconsole.log(erro);\n\t\t\t\t\tthrow new Error(\"Não foi possível importar as negociações\");\n\t\t\t\t});\n\t}\n\n\tapaga() {\n\t\treturn ConnectionFactory.getConnection()\n\t\t\t\t.then(connection => new NegociacaoDao(connection))\n\t\t\t\t.then(dao => dao.apagaTodos())\n\t\t\t\t.then( () => \"Negociações apagadas com sucesso\")\n\t\t\t\t.catch( erro => {\n\t\t\t\t\tconsole.log(erro);\n\t\t\t\t\tthrow new Error(\"Não foi possível apagar as Negociações\");\n\t\t\t\t})\n\t}\n}"]}